#include <unistd.h>
#include <getopt.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include "${PROJ}_yopts.h"

struct yopts ${PROJ}_yopts = { };
static int ${PROJ}_yopts_usage(char *prog);
static int ${PROJ}_yopts_fixup_choices(void);
static int ${PROJ}_yopts_parse_args(int argc, char **argv);
static int ${PROJ}_yopts_check_reqs(void);
static int yopt_err = 0;

static void yopt_print(const char *format, ...)
{
        va_list params;

        va_start(params, format);
        fprintf(stderr, format, params);
        va_end(params);
}

static unsigned int yopt_parse_int(char *str)
{
	char *aux;
	unsigned int ret;

	ret = strtol(str, &aux, 10);
	if (*aux != '\0')
		yopt_err = 1;

	return ret;
}

int ${PROJ}_yopts_parse(int argc, char **argv)
{
	int opt, idx;
	static const char short_opts[] = "${SOPTS}";
	static const struct option long_opts[] = {
		${LOPTS}
		{ }
	};

	while (1) {
		opt = getopt_long(argc, argv, short_opts, long_opts, &idx);
		if (opt == -1)
			break;

		switch (opt) {
		${OPTS_ASSIGN}
		default:
			return ${PROJ}_yopts_usage(argv[0]);
		}

		if (yopt_err)
			return -1;
	}

	if (${PROJ}_yopts.help)
		return ${PROJ}_yopts_usage(argv[0]);

	argc -= optind;
	argv += optind;

	if (argc) {
		yopt_err = ${PROJ}_yopts_parse_args(argc, argv);
		if (yopt_err)
			return yopt_err;
	}

	yopt_err = ${PROJ}_yopts_fixup_choices();
	if (yopt_err)
		return yopt_err;

	yopt_err = ${PROJ}_yopts_check_reqs();

	return 0;
}

static int ${PROJ}_yopts_parse_args(int argc, char **argv)
{
#define next_arg()	do {	\
		argc--;		\
		argv++;		\
	} while (0)

	yopt_err = 0;

	${PARSE_ARGS}

	return yopt_err;
}

static int ${PROJ}_yopts_fixup_choices(void)
{
	yopt_err = 0;

	${FIX_CHOICES}
	return yopt_err;
}

static int ${PROJ}_yopts_check_reqs(void)
{
	yopt_err = 0;

	${CHECK_REQS}
	return yopt_err;
}

static int ${PROJ}_yopts_usage(char *prog)
{
	printf("Usage:\n"
${USAGE}
	);
	return -1;
}
