#include <unistd.h>
#include <getopt.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include "${PROJ}_yopts.h"

#ifdef YDEBUG
#define dprint	printf
int main(int argc, char **argv)
{
	int ret;

	ret = ${PROJ}_yopts_parse(argc, argv);
	printf("Parser returned %d (left %d(%s)... options)\n", ret, yopt_tail, argv[yopt_tail]);

	return ret;
}
#else
#define dprint(...)
#endif

struct yopts ${PROJ}_yopts = {
	${DEFAULTS}
};

static int ${PROJ}_yopts_usage(char *prog, int ret);
static int ${PROJ}_yopts_fixup_choices(void);
static int ${PROJ}_yopts_parse_arg(char *arg);
static int ${PROJ}_yopts_check_reqs(void);
static int yopt_err = YOPTS_PARSE_OK;
static const int yopt_nr_args = ${NR_ARGS};
int yopt_tail;

#define YOPTARG_SET	((char *)-1)

__attribute__((weak)) void yopt_print(const char *format, ...)
{
        va_list params;

        va_start(params, format);
        fprintf(stderr, format, params);
        va_end(params);
}

__attribute__((weak)) void *yopt_realloc(void *ptr, unsigned long size)
{
	return realloc(ptr, size);
}

static inline void *yopt_realloc_mem(void *ptr, unsigned long size)
{
	void *ret;

	ret = yopt_realloc(ptr, size);
	if (!ret)
		yopt_err = YOPTS_PARSE_ERR;

	return ret;
}

static inline unsigned int yopt_parse_int(char *str)
{
	char *aux;
	unsigned int ret;

	ret = strtol(str, &aux, 10);
	if (*aux != '\0')
		yopt_err = YOPTS_PARSE_ERR;

	return ret;
}

int ${PROJ}_yopts_parse(int argc, char **argv)
{
	int opt, idx;
	static const char short_opts[] = "-${SOPTS}";
	const char *cur_sopt = short_opts;
	static const struct option long_opts[] = {
		${LOPTS}
		{ }
	};

	if (!yopt_nr_args)
		cur_sopt++;

	while (1) {
		opt = getopt_long(argc, argv, cur_sopt, long_opts, &idx);
		if (opt == -1)
			break;

		switch (opt) {
		${OPTS_ASSIGN}
		case 1:
			if (*cur_sopt != '-') {
				yopt_print("YODA: Internal error. Plz, report to developers.\n");
				return YOPTS_PARSE_ERR;
			}

			opt = ${PROJ}_yopts_parse_arg(argv[optind - 1]);
			if (opt) {
				dprint("Reset arg scan to permutating\n");
				/* reset getopt_long to normal (permutating) scan */
				optind--;
				argc -= optind;
				argv += optind;
				optind = 0;
				cur_sopt++;
			}
			break;
		default:
			return ${PROJ}_yopts_usage(argv[0], YOPTS_PARSE_ERR);
		}

		if (yopt_err)
			return yopt_err;
	}

	yopt_tail = optind + 1;

	if (${PROJ}_yopts.help)
		return ${PROJ}_yopts_usage(argv[0], YOPTS_PARSE_SPECIAL);
	if (${PROJ}_yopts.version)
		return YOPTS_PARSE_SPECIAL;

	yopt_err = ${PROJ}_yopts_fixup_choices();
	if (yopt_err)
		return yopt_err;

	yopt_err = ${PROJ}_yopts_check_reqs();
	if (yopt_err)
		return yopt_err;

	return YOPTS_PARSE_OK;
}

static int ${PROJ}_yopts_parse_arg(char *arg)
{
	static int carg = 0;

	switch (carg) {
${ASSIGN_ARGS}
	}

	carg++;
	return carg == yopt_nr_args;
}

static int ${PROJ}_yopts_fixup_choices(void)
{
	yopt_err = YOPTS_PARSE_OK;

	${FIX_CHOICES}
	return yopt_err;
}

static int ${PROJ}_yopts_check_reqs(void)
{
	yopt_err = YOPTS_PARSE_OK;

	${CHECK_REQS}
	return yopt_err;
}

static int ${PROJ}_yopts_usage(char *prog, int ret)
{
	printf("Usage:\n"
${USAGE}
	);
	return ret;
}
